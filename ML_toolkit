# IMPORTS
###############################################################################

"""Explore learning curves for classification of handwritten digits"""

from matplotlib import pyplot as plt
import numpy
from sklearn.datasets import *
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

# FUNCTIONS
##############################################################################

def display_digits():
    """Read in the 8x8 pictures of numbers and display 10 of them."""
    digits = load_digits()
    print(digits.DESCR)
    fig = plt.figure()
    for i in range(10):
        subplot = fig.add_subplot(5, 2, i + 1)
        subplot.matshow(numpy.reshape(digits.data[i], (8, 8)), cmap='gray')

    plt.show()


def train_model(int):
    """Train a model on pictures of digits.
    Read in 8x8 pictures of numbers and evaluate the accuracy of the model
    when different percentages of the data are used as training data. This
    y_size plots the average accuracy of the model as a function of the percent
    of data used to train it.
    """
    tp=int
    data = load_digits()
    num_trials = 10
    train_percentages = tp*100
    print("aaaaaaaaaaaa",train_percentages)
    test_accuracies = numpy.zeros(len(train_percentages))

    # train models with training percentages between 5 and 90 (see
    # train_percentages) and evaluate the resultant accuracy for each.
    # You should repeat each training percentage num_trials times to smooth out
    # variability.
    # For consistency with the previous example use
    # model = LogisticRegression(C=10**-10) for your learner

    # TODO: your code here
    print("great success")

    findings = X_train, X_test, y_train, y_test = train_test_split(data.data,
                                                                   data.target,
                                                                   tp)
    model = LogisticRegression(C=10**-10)
    model.fit(X_train, y_train)


def train_size(k):
    """Recursive function specifying how big training dataset will be by
    percentage. tp is the train percentage. It indexes by 5 each time
    it is run.
    """
    tp = .05*k
    if tp==0.9:
        print(tp)
        return tp
    else:
        print(tp,'nd')
        return train_model(tp), train_size(k=k+1)



# train_size = tp
    #
    #
    # fig = plt.figure()
    # plt.plot(train_percentages, test_accuracies)
    # plt.xlabel("Percentage of Data Used for Training")
    # plt.ylabel("Accuracy on Test Set")
    # plt.show()

# MAIN
###############################################################################

if __name__ == "__main__":
    # Feel free to comment/uncomment as needed
    # display_digits()
    # train_model()
    train_size(1)
# train_accuracy = model.score(X_train, y_train)
# test_accuracy = model.score(X_test, y_test)

from sklearn.datasets import *
from matplotlib import pyplot as plt
import numpy
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

data = load_digits()
X_train, X_test, y_train, y_test = train_test_split(data.data, data.target,
train_size=0.5)
model = LogisticRegression(C=10**-10)
model.fit(X_train, y_train)
train_accuracy = model.score(X_train, y_train)
test_accuracy = model.score(X_test, y_test)
print("Train accuracy %f" %model.score(X_train, y_train))
print("Test accuracy %f"%model.score(X_test, y_test))

fig = plt.figure()
plt.plot(train_accuracy, test_accuracy)
plt.xlabel("Percentage of Data Used for Training")
plt.ylabel("Accuracy on Test Set")
plt.show()
